/*
Copyright 2021 jude.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"fmt"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/util/json"
	"k8s.io/client-go/util/retry"
	reflect2 "reflect"

	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"

	appv1beta1 "github.com/haozi4263/opdemo/api/v1beta1"
	appsv1 "k8s.io/api/apps/v1"
)

var (
	oldSpecAnnotation = "old/spec"
)

// MyAppReconciler reconciles a MyApp object
type MyAppReconciler struct {
	client.Client
	Log    logr.Logger
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=app.shimo.im,resources=myapps,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=app.shimo.im,resources=myapps/status,verbs=get;update;patch

func (r *MyAppReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {
	ctx := context.Background()
	_ = r.Log.WithValues("myapp", req.NamespacedName)

	//首先获取MyApp实例
	var myapp appv1beta1.MyApp
	err := r.Client.Get(ctx, req.NamespacedName, &myapp)
	if err != nil {
		if client.IgnoreNotFound(err) != nil {
			return ctrl.Result{}, err // Reconcile函数返回值err如果不为空出错后会重新如队列
		}
		//在删除一个不存在的对象时候，可能会报一个not-found错误，这种情况下不需要重新入队列排队修复
		return ctrl.Result{}, nil
	}
	//当前的对象已经标记为了删除也不需要处理
	if myapp.DeletionTimestamp != nil {
		return ctrl.Result{}, nil
	}
	//如果不存在关联的资源，是不是应该创建
	//如果存在关联的资源，是不是要判断是否需要更新
	deploy := &appsv1.Deployment{}
	if err := r.Client.Get(ctx, req.NamespacedName, deploy); err != nil && errors.IsNotFound(err) {
		// 创建Annotation关联
		// 将spec信息放到Annotation中的old-spec key中，后面更新时候会比对当前deployment的spec和Annotation中的old-spec是否相等
		data, err := json.Marshal(myapp.Spec)
		if err != nil {
			return ctrl.Result{}, err
		}
		if myapp.Annotations != nil {
			myapp.Annotations[oldSpecAnnotation] = string(data)
		} else {
			myapp.Annotations = map[string]string{
				oldSpecAnnotation: string(data),
			}
		}
		//Annotation创建更新MyApp
		if err := retry.RetryOnConflict(retry.DefaultRetry, func() error {
			return r.Client.Update(ctx, &myapp)
		}); err != nil {
			return ctrl.Result{}, err
		}

		//deployment不存在，创建关联资源
		newDeply := NewDeploy(&myapp)
		if err := r.Client.Create(ctx, newDeply); err != nil {
			return ctrl.Result{}, err
		}
		newService := NewService(&myapp)
		if err := r.Client.Create(ctx, newService); err != nil {
			return ctrl.Result{}, err
		}
		//创建成功
		return ctrl.Result{}, nil
	}

	//更新，判断是否需要更新,根据Yaml文件是否发生了改变
	//oldyaml我们可以从annotations里面获取
	oldSpec := appv1beta1.MyAppSpec{}
	if err := json.Unmarshal([]byte(myapp.Annotations[oldSpecAnnotation]), &oldSpec); err != nil {
		return ctrl.Result{}, err //oldSpec不存在重试一次
	}

	//和新旧对象比较，如果不一致则更新 DeepEqual会对比类型一致的对象所有的字段是否相等
	if !reflect2.DeepEqual(myapp.Spec, oldSpec) {
		//跟新关联资源
		newDeploy := NewDeploy(&myapp)
		oldDeploy := &appsv1.Deployment{}
		//判断oldDeploy是否存在
		if err := r.Client.Get(ctx, req.NamespacedName, oldDeploy); err != nil {
			return ctrl.Result{}, err // err不为空，重新入队列
		}
		oldDeploy.Spec = newDeploy.Spec
		//正常直接更新oldDeploy,一般不会直接调用update更新，因其他控制器可能也在watch，可能导致deploymengt版本不一致
		if err := retry.RetryOnConflict(retry.DefaultRetry, func() error { // 解决多个控制器同时更新冲突
			return r.Client.Update(ctx, oldDeploy)
		}); err != nil {
			return ctrl.Result{}, err
		}

		//更新Service
		newService := NewService(&myapp)
		oldService := &corev1.Service{}
		if err := r.Client.Get(ctx, req.NamespacedName, oldService); err != nil {
			fmt.Println("svc err")
			return ctrl.Result{}, err
		}
		// 更新时候newservice的clusterip为空，指定clusterIp为之前的，否则重新更新svc会抱错
		newService.Spec.ClusterIP = oldService.Spec.ClusterIP
		oldService.Spec = newService.Spec
		if err := retry.RetryOnConflict(retry.DefaultRetry, func() error {
			return r.Client.Update(ctx, oldService)
		}); err != nil {
			return ctrl.Result{}, err
		}

	}

	return ctrl.Result{}, nil
}

func (r *MyAppReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&appv1beta1.MyApp{}).
		Complete(r)
}
